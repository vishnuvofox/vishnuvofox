---
apiVersion: v1
kind: ConfigMap
metadata:
  name: zookeeper-cm
data:
  ALLOW_ANONYMOUS_LOGIN: "yes"
  ZOO_ADMINSERVER_ENABLED: "false"
  ZOO_AUTOPURGE_PURGEINTERVAL: "2"
  ZOO_AUTOPURGE_SNAPRETAINCOUNT: "10"
  ZOO_CFG_EXTRA: "metricsProvider.className=org.apache.zookeeper.metrics.prometheus.PrometheusMetricsProvider metricsProvider.httpPort=7070"
  ZOO_INIT_LIMIT: "10"
  ZOO_STANDALONE_ENABLED: "true" # Key difference from the cluster setup
  ZOO_SYNC_LIMIT: "6"
  ZOO_TICK_TIME: "4000"
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper # This is the service NiFi will connect to
  labels:
    app: zookeeper
  annotations:
    app.kubernetes.io/name: zookeeper
    app.kubernetes.io/part-of: nifi
spec:
  type: ClusterIP
  selector:
    app: zookeeper # Should match labels in the StatefulSet template below
  ports:
  - protocol: TCP
    port: 2181 # NiFi connects to this port
    targetPort: 2181
    name: zk

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zookeeper
  labels:
    name: zookeeper
    app: zookeeper
  annotations:
    app.kubernetes.io/name: zookeeper
    app.kubernetes.io/part-of: nifi
spec:
  replicas: 1 # For standalone Zookeeper
  revisionHistoryLimit: 1
  serviceName: zookeeper # Must match the Service name above
  podManagementPolicy: OrderedReady
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      automountServiceAccountToken: false
      enableServiceLinks: false
      setHostnameAsFQDN: true
      dnsPolicy: ClusterFirstWithHostNet
      restartPolicy: Always
      securityContext:
        runAsGroup: 1000
        runAsUser: 1000
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: zookeeper
        image: docker.io/zookeeper:3.9 # Matches kustomization image override
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 2181
          name: zk
        env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ZOO_SERVERS # For standalone, this points to itself
            value: "server.1=$(POD_IP):2888:3888;2181"
        envFrom:
          - configMapRef:
              name: zookeeper-cm # From ConfigMap above
              optional: false
        livenessProbe:
          exec:
            command:
              - which # Simple check if java is in PATH, often used as a basic liveness
              - java
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          tcpSocket:
              port: zk # Check if the client port is listening
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        resources:
          requests:
            cpu: 200m
            memory: 500Mi
          limits:
            cpu: 200m
            memory: 500Mi
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - ALL
        volumeMounts:
          - mountPath: /data
            name: data
            subPath: data
          - mountPath: /datalog
            name: data
            subPath: datalog
          - mountPath: /conf # Some ZK images might write runtime config here
            name: data
            subPath: conf
      volumes:
        - name: data
          emptyDir: # For simplicity, using emptyDir. Consider PersistentVolumeClaims for production.
            sizeLimit: 2Gi
